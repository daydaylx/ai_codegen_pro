"""Enterprise Multi-File Code Generator"""

import json
from dataclasses import dataclass, field
from pathlib import Path
from typing import Any, Dict, List, Optional

from ..utils.logger_service import LoggerService


@dataclass
class FileSpec:
    """Specification for a single file to generate"""

    filename: str
    template: str
    variables: Dict[str, Any] = field(default_factory=dict)
    description: str = ""
    dependencies: List[str] = field(default_factory=list)


@dataclass
class ProjectSpec:
    """Complete project specification"""

    name: str
    description: str
    files: List[FileSpec] = field(default_factory=list)
    project_variables: Dict[str, Any] = field(default_factory=dict)
    structure: Dict[str, Any] = field(default_factory=dict)


class MultiFileGenerator:
    """Enterprise-grade multi-file code generator"""

    def __init__(self):
        self.logger = LoggerService().get_logger(__name__)
        self.project_templates = self._load_project_templates()

    def _load_project_templates(self) -> Dict[str, ProjectSpec]:
        """Load pre-defined project templates"""
        return {
            "fastapi_microservice": self._get_fastapi_microservice_spec(),
            "django_crud_app": self._get_django_crud_spec(),
            "python_package": self._get_python_package_spec(),
        }

    def generate_project(
        self,
        project_type: str,
        project_variables: Dict[str, Any],
        output_path: Optional[Path] = None,
    ) -> Dict[str, str]:
        """Generate complete project with multiple files"""

        if project_type not in self.project_templates:
            raise ValueError(f"Unknown project type: {project_type}")

        project_spec = self.project_templates[project_type]
        merged_vars = {**project_spec.project_variables, **project_variables}

        generated_files = {}

        self.logger.info(
            f"Generating {project_type} project with " f"{len(project_spec.files)} files"
        )

        for file_spec in project_spec.files:
            self.logger.debug(f"Generating file: {file_spec.filename}")

            file_vars = {**merged_vars, **file_spec.variables}
            content = self._generate_file_content(file_spec, file_vars)
            generated_files[file_spec.filename] = content

        if output_path:
            self._write_project_files(output_path, generated_files)

        return generated_files

    def _generate_file_content(self, file_spec: FileSpec, variables: Dict[str, Any]) -> str:
        """Generate content for a single file"""

        content_template = f"""# {file_spec.filename}
# Generated by AI CodeGen Pro
# Description: {file_spec.description}

# Project Variables: {json.dumps(variables, indent=2)}

def main():
    '''Main function for {file_spec.filename}'''
    pass

if __name__ == "__main__":
    main()
"""
        return content_template.strip()

    def _write_project_files(self, output_path: Path, generated_files: Dict[str, str]):
        """Write generated files to disk"""
        output_path.mkdir(parents=True, exist_ok=True)

        for filename, content in generated_files.items():
            file_path = output_path / filename
            file_path.parent.mkdir(parents=True, exist_ok=True)

            with open(file_path, "w", encoding="utf-8") as f:
                f.write(content)

            self.logger.debug(f"Written file: {file_path}")

    def _get_fastapi_microservice_spec(self) -> ProjectSpec:
        """Get FastAPI microservice project specification"""
        return ProjectSpec(
            name="FastAPI Microservice",
            description="A complete FastAPI microservice",
            files=[
                FileSpec("main.py", "fastapi_main", {}, "FastAPI application entry point"),
                FileSpec("requirements.txt", "python_requirements", {}, "Python dependencies"),
                FileSpec("Dockerfile", "dockerfile", {}, "Docker container configuration"),
            ],
            project_variables={"framework": "fastapi"},
        )

    def _get_django_crud_spec(self) -> ProjectSpec:
        """Get Django CRUD project specification"""
        return ProjectSpec(
            name="Django CRUD App",
            description="A Django application with CRUD operations",
            files=[
                FileSpec("models.py", "django_models", {}, "Django data models"),
                FileSpec("views.py", "django_views", {}, "Django view functions"),
                FileSpec("urls.py", "django_urls", {}, "Django URL routing"),
            ],
            project_variables={"framework": "django"},
        )

    def _get_python_package_spec(self) -> ProjectSpec:
        """Get Python package project specification"""
        return ProjectSpec(
            name="Python Package",
            description="A complete Python package structure",
            files=[
                FileSpec("__init__.py", "python_init", {}, "Package initialization"),
                FileSpec("setup.py", "python_setup", {}, "Package setup configuration"),
                FileSpec("README.md", "readme", {}, "Package documentation"),
            ],
            project_variables={"type": "package"},
        )
